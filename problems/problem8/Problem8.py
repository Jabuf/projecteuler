"""
https://projecteuler.net/problem=8

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?
"""

from locals import *

ONE_THOUSAND_DIGIT_NUMBER_1 = "73167176531330624919225119674426574742355349194934"
ONE_THOUSAND_DIGIT_NUMBER_2 = "96983520312774506326239578318016984801869478851843"
ONE_THOUSAND_DIGIT_NUMBER_3 = "85861560789112949495459501737958331952853208805511"
ONE_THOUSAND_DIGIT_NUMBER_4 = "12540698747158523863050715693290963295227443043557"
ONE_THOUSAND_DIGIT_NUMBER_5 = "66896648950445244523161731856403098711121722383113"
ONE_THOUSAND_DIGIT_NUMBER_6 = "62229893423380308135336276614282806444486645238749"
ONE_THOUSAND_DIGIT_NUMBER_7 = "30358907296290491560440772390713810515859307960866"
ONE_THOUSAND_DIGIT_NUMBER_8 = "70172427121883998797908792274921901699720888093776"
ONE_THOUSAND_DIGIT_NUMBER_9 = "65727333001053367881220235421809751254540594752243"
ONE_THOUSAND_DIGIT_NUMBER_10 = "52584907711670556013604839586446706324415722155397"
ONE_THOUSAND_DIGIT_NUMBER_11 = "53697817977846174064955149290862569321978468622482"
ONE_THOUSAND_DIGIT_NUMBER_12 = "83972241375657056057490261407972968652414535100474"
ONE_THOUSAND_DIGIT_NUMBER_13 = "82166370484403199890008895243450658541227588666881"
ONE_THOUSAND_DIGIT_NUMBER_14 = "16427171479924442928230863465674813919123162824586"
ONE_THOUSAND_DIGIT_NUMBER_15 = "17866458359124566529476545682848912883142607690042"
ONE_THOUSAND_DIGIT_NUMBER_16 = "24219022671055626321111109370544217506941658960408"
ONE_THOUSAND_DIGIT_NUMBER_17 = "07198403850962455444362981230987879927244284909188"
ONE_THOUSAND_DIGIT_NUMBER_18 = "84580156166097919133875499200524063689912560717606"
ONE_THOUSAND_DIGIT_NUMBER_19 = "05886116467109405077541002256983155200055935729725"
ONE_THOUSAND_DIGIT_NUMBER_20 = "71636269561882670428252483600823257530420752963450"

ONE_THOUSAND_DIGIT_NUMBER_COMPLETE = ONE_THOUSAND_DIGIT_NUMBER_1 + ONE_THOUSAND_DIGIT_NUMBER_3 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_4 + ONE_THOUSAND_DIGIT_NUMBER_5 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_6 + ONE_THOUSAND_DIGIT_NUMBER_7 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_8 + ONE_THOUSAND_DIGIT_NUMBER_9 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_10 + ONE_THOUSAND_DIGIT_NUMBER_11 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_12 + ONE_THOUSAND_DIGIT_NUMBER_13 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_14 + ONE_THOUSAND_DIGIT_NUMBER_15 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_16 + ONE_THOUSAND_DIGIT_NUMBER_17 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_18 + ONE_THOUSAND_DIGIT_NUMBER_19 \
                                     + ONE_THOUSAND_DIGIT_NUMBER_20


def solution():
    largest_product = 0

    for i in range(0, len(ONE_THOUSAND_DIGIT_NUMBER_COMPLETE) - 13):
        thirteen_digit = ONE_THOUSAND_DIGIT_NUMBER_COMPLETE[i: 13 + i]
        digits_product = 1

        for j in range(0, 13):
            digits_product = digits_product * int(thirteen_digit[j])

        if digits_product > largest_product:
            largest_product = digits_product

    return largest_product


with Timer() as timed:
    print(solution())
print("Seconds taken: {0}".format(timed.elapsed))
