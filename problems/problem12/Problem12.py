"""
https://projecteuler.net/problem=11

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from locals import *


def solution():
    nth = 1
    triangle_number = build_triangle_number(nth)

    while get_number_of_divisors(triangle_number) < 500:
        nth += 1
        triangle_number = build_triangle_number(nth)

    return triangle_number


def build_triangle_number(nth):
    """
    :param nth: the position of the triangle that will be build
    :return: the triangle number
    """
    triangle_number = 0

    for i in range(0, nth + 1):
        triangle_number += i

    return triangle_number


with Timer() as timed:
    print(solution())
print("Seconds taken: {0}".format(timed.elapsed))
